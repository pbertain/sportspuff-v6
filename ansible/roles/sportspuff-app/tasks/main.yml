---
# Install system dependencies
- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install system packages
  apt:
    name:
      - python3
      - python3-pip
      - python3-venv
      - python3-full
      - python3-dev
      - postgresql
      - postgresql-contrib
      - git
      - nginx
    state: present

# Create application directory
- name: Create application directory
  file:
    path: "{{ app_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'

# Clone/update repository
- name: Clone repository
  git:
    repo: "https://github.com/pbertain/sportspuff-v6.git"
    dest: "{{ app_dir }}"
    version: "{{ branch }}"
    force: yes
  become_user: "{{ app_user }}"

# Create virtual environment
- name: Create virtual environment
  command: "python3 -m venv {{ app_dir }}/venv"
  args:
    creates: "{{ app_dir }}/venv"

- name: Debug virtual environment
  command: "{{ app_dir }}/venv/bin/python --version"
  register: venv_python_version
  changed_when: false

- name: Show Python version
  debug:
    msg: "Virtual environment Python version: {{ venv_python_version.stdout }}"

- name: Upgrade pip in virtual environment
  command: "{{ app_dir }}/venv/bin/pip install --upgrade pip"
  args:
    creates: "{{ app_dir }}/venv/bin/pip"

# Install requirements in smaller chunks to avoid timeouts
- name: Install core Flask requirements
  pip:
    name:
      - Flask==2.3.3
      - Werkzeug==2.3.7
      - python-dotenv==1.0.0
    virtualenv: "{{ app_dir }}/venv"
    virtualenv_command: "{{ app_dir }}/venv/bin/python"
  async: 300
  poll: 30

- name: Install database requirements
  pip:
    name:
      - psycopg2-binary==2.9.9
    virtualenv: "{{ app_dir }}/venv"
    virtualenv_command: "{{ app_dir }}/venv/bin/python"
  async: 300
  poll: 30

- name: Install data processing requirements
  pip:
    name:
      - pandas==1.5.3
      - openpyxl==3.1.2
    virtualenv: "{{ app_dir }}/venv"
    virtualenv_command: "{{ app_dir }}/venv/bin/python"
    extra_args: "--timeout 300 --retries 3 --prefer-binary"
  async: 1200
  poll: 60

# Create environment file
- name: Create environment file
  template:
    src: .env.j2
    dest: "{{ app_dir }}/.env"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0600'

# Setup database
- name: Create database
  postgresql_db:
    name: "{{ db_name }}"
    state: present

- name: Create database user
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    priv: "{{ db_name }}:ALL"
    state: present

# Run database schema
- name: Run database schema
  postgresql_query:
    db: "{{ db_name }}"
    query_from_file: "{{ app_dir }}/database_schema.sql"

# Import data
- name: Import data
  command: "{{ app_dir }}/venv/bin/python import_data.py"
  args:
    chdir: "{{ app_dir }}"
  become_user: "{{ app_user }}"
