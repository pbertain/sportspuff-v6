---
# Install system dependencies
- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install system packages
  apt:
    name:
      - python3
      - python3-pip
      - python3-venv
      - python3-full
      - python3-dev
      - postgresql
      - postgresql-contrib
      - git
      - nginx
    state: present

# Create application directory
- name: Create application directory
  file:
    path: "{{ app_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'

# Clone/update repository
- name: Clone repository
  git:
    repo: "https://github.com/pbertain/sportspuff-v6.git"
    dest: "{{ app_dir }}"
    version: "{{ branch }}"
    force: yes
  become_user: "{{ app_user }}"

# Create virtual environment
- name: Create virtual environment
  command: "python3 -m venv {{ app_dir }}/venv"
  args:
    creates: "{{ app_dir }}/venv"

- name: Debug virtual environment
  command: "{{ app_dir }}/venv/bin/python --version"
  register: venv_python_version
  changed_when: false

- name: Show Python version
  debug:
    msg: "Virtual environment Python version: {{ venv_python_version.stdout }}"

- name: Upgrade pip in virtual environment
  command: "{{ app_dir }}/venv/bin/pip install --upgrade pip"
  args:
    creates: "{{ app_dir }}/venv/bin/pip"

# Install requirements in smaller chunks to avoid timeouts
- name: Install core Flask requirements
  pip:
    name:
      - Flask==2.3.3
      - Werkzeug==2.3.7
      - python-dotenv==1.0.0
    virtualenv: "{{ app_dir }}/venv"
    virtualenv_command: "{{ app_dir }}/venv/bin/python"
  async: 300
  poll: 30

- name: Install database requirements
  pip:
    name:
      - psycopg2-binary==2.9.9
    virtualenv: "{{ app_dir }}/venv"
    virtualenv_command: "{{ app_dir }}/venv/bin/python"
  async: 300
  poll: 30

- name: Install data processing requirements
  pip:
    name:
      - pandas==1.5.3
      - openpyxl==3.1.2
    virtualenv: "{{ app_dir }}/venv"
    virtualenv_command: "{{ app_dir }}/venv/bin/python"
    extra_args: "--timeout 300 --retries 3 --prefer-binary"
  async: 1200
  poll: 60

# Create environment file
- name: Create environment file
  template:
    src: .env.j2
    dest: "{{ app_dir }}/.env"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0600'

# Setup database
- name: Install PostgreSQL
  apt:
    name:
      - postgresql
      - postgresql-contrib
      - python3-psycopg2
    state: present

- name: Start and enable PostgreSQL
  systemd:
    name: postgresql
    state: started
    enabled: yes

- name: Configure PostgreSQL authentication
  shell: |
    find /etc/postgresql -name "pg_hba.conf" -exec sed -i 's/^local\s\+all\s\+postgres\s\+peer/local   all             postgres                                md5/' {} \;
  args:
    creates: /tmp/pg_hba_configured
  notify: restart postgresql

- name: Set postgres user password
  shell: |
    sudo -u postgres psql -c "ALTER USER postgres PASSWORD '{{ db_password }}';"
  args:
    creates: /tmp/postgres_password_set

- name: Create database
  shell: |
    sudo -u postgres createdb {{ db_name }}
  args:
    creates: /tmp/database_created
  register: db_create_result
  failed_when: db_create_result.rc != 0 and "already exists" not in db_create_result.stderr

- name: Create database user
  shell: |
    sudo -u postgres psql -c "CREATE USER {{ db_user }} WITH PASSWORD '{{ db_password }}';"
  args:
    creates: /tmp/db_user_created
  register: user_create_result
  failed_when: user_create_result.rc != 0 and "already exists" not in user_create_result.stderr

- name: Grant database privileges
  shell: |
    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ db_name }} TO {{ db_user }};"

# Run database schema
- name: Run database schema
  shell: |
    sudo -u postgres psql -d {{ db_name }} -f {{ app_dir }}/database_schema.sql

# Import data
- name: Copy Excel file to server
  copy:
    src: "{{ playbook_dir }}/../../../team-logo-image-downloads.xlsx"
    dest: "{{ app_dir }}/team-logo-image-downloads.xlsx"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'

- name: Check if Excel file exists
  stat:
    path: "{{ app_dir }}/team-logo-image-downloads.xlsx"
  register: excel_file

- name: Show Excel file status
  debug:
    msg: "Excel file exists: {{ excel_file.stat.exists }}, size: {{ excel_file.stat.size | default('unknown') }}"

- name: Generate CSV files from Excel
  command: "{{ app_dir }}/venv/bin/python analyze_excel.py"
  args:
    chdir: "{{ app_dir }}"
  become_user: "{{ app_user }}"
  register: csv_generation_result

- name: Show CSV generation result
  debug:
    msg: "CSV generation stdout: {{ csv_generation_result.stdout_lines }}"

- name: Import data
  command: "{{ app_dir }}/venv/bin/python import_data.py"
  args:
    chdir: "{{ app_dir }}"
  become_user: "{{ app_user }}"
